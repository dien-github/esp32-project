Executing action: all (aliases: build)
Running ninja in directory /home/grace/esp/project/build
Executing "ninja all"...
[1/7] Performing build step for 'bootloader'
[1/1] cd /home/grace/esp/project/build/bootloader/esp-idf/esptool_py && /home/grace/.espressif/python_env/idf5.5_py3.12_env/bin/python /home/grace/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/grace/esp/project/build/bootloader/bootloader.bin
Bootloader binary size 0x6680 bytes. 0x980 bytes (8%) free.
[2/7] No install step for 'bootloader'
[3/7] Completed 'bootloader'
[4/7] Generating esp-idf/esp_system/ld/sections.ld
[5/7] Linking CXX executable project.elf
[6/7] Generating binary image from built executable
esptool.py v4.10.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/grace/esp/project/build/project.bin
[7/7] cd /home/grace/esp/project/build/esp-idf/esptool_py && /home/grace/.espressif/python_env/idf5.5_py3.12_env/bin/python /home/grace/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/grace/esp/project/build/partition_table/partition-table.bin /home/grace/esp/project/build/project.bin
project.bin binary size 0x2d7c0 bytes. Smallest app partition is 0x100000 bytes. 0xd2840 bytes (82%) free.

Project build complete. To flash, run:
 idf.py flash
or
 idf.py -p PORT flash
or
 python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 2MB --flash_freq 40m 0x1000 build/bootloader/bootloader.bin 0x8000 build/partition_table/partition-table.bin 0x10000 build/project.bin
or from the "/home/grace/esp/project/build" directory
 python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash "@flash_args"
